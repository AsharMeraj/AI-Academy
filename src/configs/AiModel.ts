import { GoogleGenerativeAI } from "@google/generative-ai";

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY as string;
if (!apiKey) {
  throw new Error("API key is not set in the environment variables.");
}

const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-1.5-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};


export const courseOutlineAIModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: "Generate a study material for Python for Exam and level of difficulty will be beginner with summary of course, List of chapters (Max 3) along with summary and Emoji icon for each chapter, Topic list for each chapter. All result in JSON format",
        },
      ],
    },
    {
      role: "model",
      parts: [
        { text: "```json\n{\n  \"courseSummary\": \"This introductory Python course covers the fundamental concepts and syntax needed to start programming in Python.  It's designed for beginners with no prior programming experience.  Upon completion, you will be able to write basic Python programs, understand data types, control flow, and fundamental data structures.\",\n  \"chapters\": [\n    {\n      \"chapterTitle\": \"Introduction to Python and Basic Syntax\",\n      \"emoji\": \"üêç\",\n      \"chapterSummary\": \"This chapter introduces the basics of Python, including setting up your environment, understanding variables, data types (integers, floats, strings, booleans), operators, and basic input/output.\",\n      \"topics\": [\n        \"Installing Python\",\n        \"Running Python code (Interactive shell & scripts)\",\n        \"Variables and Data Types (int, float, str, bool)\",\n        \"Operators (Arithmetic, Comparison, Logical)\",\n        \"Basic Input and Output (print(), input())\",\n        \"Comments in Python\",\n        \"String manipulation (basic slicing and concatenation)\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Control Flow and Data Structures\",\n      \"emoji\": \"üö¶\",\n      \"chapterSummary\": \"This chapter covers conditional statements (if, elif, else), loops (for and while), and introduces fundamental data structures like lists and tuples.\",\n      \"topics\": [\n        \"Conditional Statements (if, elif, else)\",\n        \"Looping Constructs (for loop, while loop)\",\n        \"List creation and manipulation (append, insert, remove, indexing, slicing)\",\n        \"Tuples: creation and accessing elements\",\n        \"Iteration over lists and tuples\",\n        \"Nested loops\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Functions and Basic File Handling\",\n      \"emoji\": \"üìÅ\",\n      \"chapterSummary\": \"This chapter introduces the concept of functions for code reusability and modularity and covers basic file input/output operations.\",\n      \"topics\": [\n        \"Defining and calling functions\",\n        \"Function parameters and arguments\",\n        \"Return values from functions\",\n        \"Scope of variables\",\n        \"Opening, reading, and writing to text files\",\n        \"Error Handling (basic try-except blocks)\"\n      ]\n    }\n  ]\n}\n```\n" },
      ],
    },
  ],
});

export const generateNotesAiModel = model.startChat({
  generationConfig,
  // history: [
  //   {
  //     role: "user",
  //     parts: [
  //       {text: "Generate detailed exam material content as a JSON array of objects, each containing a single \"content\" key with its value as an HTML string styled using inline CSS. Follow these guidelines:\n        Main Headings: Style with font-size: 2rem; font-weight: bold; color: black; margin-bottom: 0.5rem;.\n        Subheadings: Include up to 6 subheadings, styled with color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;.\n        Paragraphs: Add paragraphs in every subheadings styled with font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;.\n        Programming Topics: Add responsive code blocks under each subheading, styled with background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;.\n        Mobile-Friendly Layout: Maintain a clean design with margin-top: 1.5rem; margin-bottom: 1.5rem; between sections.\n        Exclude <html>, <head>, <body>, and <title> tags. Use the provided chapter details to generate the content:\n{\n\"chapterTitle\": \"Advanced React Concepts and Performance Optimization\",\n\"emoji\": \"üöÄ\",\n\"chapterSummary\": \"This chapter delves into advanced React concepts like optimizing performance using techniques such as memoization, useMemo, useCallback, and code splitting. We also cover virtualized lists and efficient rendering strategies for large datasets.\",\n\"topics\": [\n\"Advanced Component Lifecycle Methods\",\n\"Memoization techniques (useMemo, useCallback)\",\n\"React.memo\",\n\"Virtualized Lists (react-window, react-virtualized)\",\n\"Code splitting and lazy loading\",\n\"Performance profiling and optimization strategies\",\n\"Concurrent Mode and Suspense\"\n]\n},\n{\n\"chapterTitle\": \"Complex State Management and Testing\",\n\"emoji\": \"üß™\",\n\"chapterSummary\": \"This chapter explores advanced state management solutions beyond useState and useReducer, including context API for complex data flows, and exploring third-party libraries like Zustand, Jotai, or Recoil.  We also cover advanced testing strategies, including snapshot testing and mocking.\",\n\"topics\": [\n\"Advanced Context API usage\",\n\"State management libraries (Zustand, Jotai, Recoil - comparative analysis)\",\n\"Testing React components with advanced techniques (Jest, React Testing Library)\",\n\"Snapshot testing\",\n\"Mocking network requests and external dependencies\",\n\"End-to-End testing strategies\"\n]\n},\n{\n\"chapterTitle\": \"TypeScript Advanced Types and Best Practices in React\",\n\"emoji\": \"üí°\",\n\"chapterSummary\": \"This chapter focuses on advanced TypeScript types and best practices within a React application. Topics include conditional types, mapped types, utility types, and advanced type inference. We‚Äôll also cover setting up a robust type system for your React application and implementing design patterns using TypeScript.\",\n\"topics\": [\n\"Advanced TypeScript Types (Conditional types, mapped types, infer, etc.)\",\n\"Utility types\",\n\"Type guards and discriminated unions\",\n\"TypeScript generics in React components\",\n\"Implementing design patterns (e.g., Singleton, Factory) in TypeScript\",\n\"Type safety with external libraries and APIs\",\n\"Setting up a strong type system for large React applications\"\n]\n}"},
  //     ],
  //   },
  //   {
  //     role: "model",
  //     parts: [
  //       {text: "```json\n[\n  {\n    \"content\": \"<h1 style=\\\"font-size: 2rem; font-weight: bold; color: black; margin-bottom: 0.5rem;\\\">üöÄ Advanced React Concepts and Performance Optimization</h1><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Advanced Component Lifecycle Methods</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Understanding the nuances of componentDidMount, componentDidUpdate, componentWillUnmount, and their equivalents in functional components (useEffect) for optimized performance and side effect management.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">useEffect(() => {\\n  // ComponentDidMount logic\\n  return () => {\\n    // ComponentWillUnmount logic\\n  };\\n}, []);</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Memoization techniques (useMemo, useCallback)</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Learn how to use `useMemo` and `useCallback` to memoize expensive calculations and prevent unnecessary re-renders.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">const memoizedValue = useMemo(() => expensiveCalculation(), [input]);\\nconst memoizedCallback = useCallback(() => expensiveFunction(), [input]);</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">React.memo</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Utilize `React.memo` for shallow comparison of props to prevent unnecessary re-renders of functional components.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">const MyComponent = React.memo(props => {/* ... */});</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Virtualized Lists (react-window, react-virtualized)</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Efficiently render large lists using virtualization libraries like `react-window` or `react-virtualized`.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Example using react-window\\n&lt;List items={data} height={500} width={300} itemSize={35} /&gt;</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Code splitting and lazy loading</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Improve initial load times by splitting your application into smaller chunks loaded on demand.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">const MyLazyComponent = lazy(() => import('./MyComponent'));</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Performance profiling and optimization strategies</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Learn to profile your React application's performance using browser developer tools and identify bottlenecks.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Use browser developer tools' performance profiler</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Concurrent Mode and Suspense</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Explore React's Concurrent Mode and Suspense for improved responsiveness and handling of asynchronous operations.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">&lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\\n  &lt;MyComponent /&gt;\\n&lt;/Suspense&gt;</pre>\"\n  },\n  {\n    \"content\": \"<h1 style=\\\"font-size: 2rem; font-weight: bold; color: black; margin-bottom: 0.5rem;\\\">üß™ Complex State Management and Testing</h1><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Advanced Context API usage</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Mastering the Context API for managing state across multiple components in a React application.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Example Context API usage\\nconst MyContext = createContext();</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">State management libraries (Zustand, Jotai, Recoil - comparative analysis)</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Compare and contrast popular state management libraries like Zustand, Jotai, and Recoil.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Example using Zustand\\nimport create from 'zustand';\\nconst useStore = create(() => ({ count: 0 }));</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Testing React components with advanced techniques (Jest, React Testing Library)</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Implement robust testing strategies using Jest and React Testing Library.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Example using React Testing Library\\ntest('renders a heading', () => {\\n  render(&lt;MyComponent /&gt;);\\n  expect(screen.getByRole('heading')).toBeInTheDocument();\\n});</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Snapshot testing</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Utilize snapshot testing for automated UI testing.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Jest snapshot testing\\ntest('matches snapshot', () => {\\n  const tree = renderer.create(&lt;MyComponent /&gt;).toJSON();\\nexpect(tree).toMatchSnapshot();\\n});</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Mocking network requests and external dependencies</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Learn to mock network requests and external dependencies during testing.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Mocking a fetch call\\njest.mock('./api', () => ({\\n  fetch: jest.fn(() => Promise.resolve({ data: 'mocked data' })),\\n}));</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">End-to-End testing strategies</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Implement end-to-end testing strategies to verify the entire application flow.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Example using Cypress or Selenium</pre>\"\n  },\n  {\n    \"content\": \"<h1 style=\\\"font-size: 2rem; font-weight: bold; color: black; margin-bottom: 0.5rem;\\\">üí° TypeScript Advanced Types and Best Practices in React</h1><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Advanced TypeScript Types (Conditional types, mapped types, infer, etc.)</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Explore advanced TypeScript types like conditional types, mapped types, and type inference for enhanced type safety.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Conditional type example\\ntype TypeName&lt;T&gt; = T extends string ? 'string' : 'number';</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Utility types</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Learn to leverage TypeScript's built-in utility types like `Partial`, `Readonly`, `Pick`, etc.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Partial type example\\ninterface Person {\\n  name: string;\\n  age: number;\\n}\\nconst partialPerson: Partial&lt;Person&gt; = { name: 'John' };</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Type guards and discriminated unions</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Implement type guards and discriminated unions to narrow down types during runtime.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\ntype Shape = { kind: 'circle', radius: number } | { kind: 'square', side: number };\\nfunction getArea(shape: Shape) {\\n  if (shape.kind === 'circle') {\\n    // Type is narrowed to { kind: 'circle', radius: number }\\n  }\\n}</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">TypeScript generics in React components</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Enhance code reusability and type safety by using generics in React components.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">function MyComponent&lt;T&gt;({ data }: { data: T }) {\\n  return &lt;div&gt;{JSON.stringify(data)}&lt;/div&gt;;\\n}</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Implementing design patterns (e.g., Singleton, Factory) in TypeScript</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Implement design patterns with TypeScript for better code organization and maintainability.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Singleton pattern example\\nclass Database {\\n  private static instance: Database;\\n  private constructor() {}\\n  public static getInstance(): Database {\\n    if (!Database.instance) {\\n      Database.instance = new Database();\\n    }\\n    return Database.instance;\\n  }\\n}</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Type safety with external libraries and APIs</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Maintain type safety when interacting with external libraries and APIs.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Defining types for external API responses</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Setting up a strong type system for large React applications</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Strategies for setting up a robust type system in large React applications.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Use TypeScript interfaces, types, and generics effectively</pre>\"\n  }\n]\n```"},
  //     ],
  //   },
  // ],
  history: [
    {
      role: "user",
      parts: [
        {text: "Generate detailed exam material content as a JSON array of objects, each containing a single \"content\" key with its value as an HTML string styled using inline CSS. Follow these guidelines:\n          Main Headings: Style with font-size: 2rem; font-weight: bold; color: black; margin-bottom: 0.5rem;.\n          Subheadings: Include up to 6 subheadings, styled with color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;.\n          Paragraphs: Add paragraphs in every subheadings styled with font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;.\n          Programming Topics: Add responsive code blocks under each subheading, styled with background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;.\n          Mobile-Friendly Layout: Maintain a clean design with margin-top: 1.5rem; margin-bottom: 1.5rem; between sections.\n          Don't add any bad control or bad escape charactor in string literal.\n          Exclude <html>, <head>, <body>, and <title> tags. Use the provided chapter details to generate the content:\n\n{\n      \"chapterTitle\": \"Advanced Scene Management and Optimization\",\n      \"emoji\": \"üöÄ\",\n      \"chapterSummary\": \"This chapter delves into sophisticated scene management techniques, focusing on optimization strategies for large and complex 3D scenes.  We'll explore methods to improve rendering performance and memory management.\",\n      \"topics\": [\n        \"Scene graph optimization: techniques for managing large numbers of objects\",\n        \"Instancing and techniques for rendering multiple similar objects efficiently\",\n        \"Level of Detail (LOD) implementation for performance optimization\",\n        \"Frustum culling and occlusion culling for improved rendering efficiency\",\n        \"Memory management and strategies for handling large assets\",\n        \"Advanced material techniques, such as shaders and custom materials\",\n        \"Implementing efficient collision detection\"\n      ]\n    },"},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n[\n  {\n    \"content\": \"<h1 style=\\\"font-size: 2rem; font-weight: bold; color: black; margin-bottom: 0.5rem;\\\">Advanced Scene Management and Optimization üöÄ</h1><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">This chapter delves into sophisticated scene management techniques, focusing on optimization strategies for large and complex 3D scenes. We'll explore methods to improve rendering performance and memory management.</p><div style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Scene Graph Optimization</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Efficiently managing a large number of objects in a 3D scene is crucial for performance.  Scene graphs provide a hierarchical structure to organize and manipulate objects.  Optimization techniques include using spatial partitioning and efficient traversal algorithms.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>// Example of scene graph node\\nclass SceneNode {\\n  constructor(mesh, transform) {\\n    this.mesh = mesh;\\n    this.transform = transform;\\n    this.children = [];\\n  }\\n  addChild(child) {\\n    this.children.push(child);\\n  }\\n}\\n</code></pre></div><div style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Instancing</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Instancing is a powerful technique to render multiple instances of the same object efficiently. Instead of rendering each object individually, the GPU renders a single instance and applies different transformations for each copy. This dramatically reduces the number of draw calls.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>// Pseudo-code for instancing\\nfor each instance in instances {\\n  set instance transform;\\n  draw instance;\\n}\\n</code></pre></div><div style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Level of Detail (LOD)</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">LOD techniques dynamically switch between different levels of detail for objects based on their distance from the camera.  Faraway objects are rendered with simpler meshes, improving performance without significantly impacting visual quality.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>// Example LOD selection\\nif (distance &lt; threshold1) {\\n  useHighDetailMesh();\\n} else if (distance &lt; threshold2) {\\n  useMediumDetailMesh();\\n} else {\\n  useLowDetailMesh();\\n}\\n</code></pre></div><div style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Frustum Culling</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Frustum culling avoids rendering objects that are outside the camera's view frustum.  This significantly reduces the number of objects that need to be processed.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>// Pseudo-code for frustum culling\\nif (object is within frustum) {\\n  render object;\\n}\\n</code></pre></div><div style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Occlusion Culling</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Occlusion culling prevents rendering objects that are hidden behind other objects.  This is a more advanced technique that can significantly improve performance in complex scenes.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>// Example using an occlusion query\\nbeginOcclusionQuery();\\nrenderObject();\\nendOcclusionQuery();\\nif (occlusionQueryResult == 0) {\\n  // Object is occluded\\n}\\n</code></pre></div><div style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Memory Management</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Efficient memory management is crucial for handling large assets. Strategies include using asset streaming, texture compression, and memory pooling.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>// Example of asset streaming\\nloadAssetAsync(assetPath, function(asset) {\\n  // Use the asset\\n});\\n</code></pre></div><div style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Advanced Material Techniques</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Shaders and custom materials allow for highly detailed and realistic rendering.  Understanding shader programming and material properties is key to optimizing visual fidelity.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>// Example GLSL fragment shader\\nvoid main() {\\n  gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\\n}\\n</code></pre></div><div style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Efficient Collision Detection</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Efficient collision detection algorithms are essential for interactive 3D environments.  Techniques like bounding volume hierarchies (BVHs) and spatial partitioning significantly improve performance.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>// Example using bounding boxes\\nfunction checkCollision(obj1, obj2) {\\n  return obj1.boundingBox.intersects(obj2.boundingBox);\\n}\\n</code></pre></div>\"\n  }\n]\n```\n"},
      ],
    },
  ],
  // history: [
  //   {
  //     role: "user",
  //     parts: [
  //       {text: "Generate detailed exam material content as a JSON object containing a single \"content\" key with its value as an HTML string styled using inline CSS. Follow these guidelines:\n          Main Headings: Style with font-size: 2rem; font-weight: bold; color: black; margin-bottom: 0.5rem;.\n          Subheadings: Include up to 6 subheadings, styled with color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;.\n          Paragraphs: Add paragraphs in every subheadings styled with font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;.\n          Programming Topics: Add responsive code blocks under each subheading, styled with background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;.\n          Mobile-Friendly Layout: Maintain a clean design with margin-top: 1.5rem; margin-bottom: 1.5rem; between sections.\n          Don't add any bad control or bad escape charactor in string literal.\n          Exclude <html>, <head>, <body>, and <title> tags. Use the provided chapter details to generate the content:\n\n{\n\"chapterTitle\": \"Advanced Scene Management and Optimization\",\n\"emoji\": \"üöÄ\",\n\"chapterSummary\": \"This chapter delves into sophisticated scene management techniques, focusing on optimization strategies for large and complex 3D scenes.  We'll explore methods to improve rendering performance and memory management.\",\n\"topics\": [\n\"Scene graph optimization: techniques for managing large numbers of objects\",\n\"Instancing and techniques for rendering multiple similar objects efficiently\",\n\"Level of Detail (LOD) implementation for performance optimization\",\n\"Frustum culling and occlusion culling for improved rendering efficiency\",\n\"Memory management and strategies for handling large assets\",\n\"Advanced material techniques, such as shaders and custom materials\",\n\"Implementing efficient collision detection\"\n]\n},"},
  //     ],
  //   },
  //   {
  //     role: "model",
  //     parts: [
  //       {text: "```json\n{\n  \"content\": \"<div style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"><h1 style=\\\"font-size: 2rem; font-weight: bold; color: black; margin-bottom: 0.5rem;\\\">üöÄ Advanced Scene Management and Optimization</h1><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">This chapter delves into sophisticated scene management techniques, focusing on optimization strategies for large and complex 3D scenes. We'll explore methods to improve rendering performance and memory management.</p><div style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Scene Graph Optimization</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Learn techniques for efficiently managing and rendering a large number of objects within a 3D scene using scene graphs.  This includes strategies for hierarchical organization and efficient traversal.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>// Example Scene Graph Node class (Conceptual)\nclass SceneNode {\n  constructor(mesh, transform) {\n    this.mesh = mesh;\n    this.transform = transform;\n    this.children = [];\n  }\n  addChild(child) {\n    this.children.push(child);\n  }\n}\n</code></pre></div><div style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Instancing</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Discover how instancing significantly improves performance when rendering multiple instances of the same object.  We'll explore techniques for efficiently batching the rendering of these objects.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>// Conceptual example of instancing (pseudocode)\nfor (let i = 0; i < numInstances; i++) {\n  setInstanceTransform(instanceTransform[i]);\n  drawMesh(mesh);\n}\n</code></pre></div><div style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Level of Detail (LOD)</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Implement LOD techniques to dynamically switch between different levels of detail for objects based on their distance from the camera, optimizing rendering performance for distant objects.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>// Example LOD selection (pseudocode)\nlet distance = camera.distanceToObject(object);\nlet lodLevel = selectLODLevel(distance);\nrenderObject(object, lodLevel);\n</code></pre></div><div style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Frustum Culling and Occlusion Culling</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Learn how to use frustum culling and occlusion culling to avoid rendering objects that are not visible to the camera, thereby improving rendering efficiency.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>//Conceptual Frustum Culling (pseudocode)\nif (object.intersectsFrustum(camera.frustum)) {\n  renderObject(object);\n}\n</code></pre></div><div style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Memory Management</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Explore effective memory management strategies, particularly important for large scenes and assets, including techniques like asset streaming and resource unloading.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>// Example of unloading unused assets (pseudocode)\nif (asset.isUnused()) {\n  unloadAsset(asset);\n}\n</code></pre></div><div style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Advanced Material Techniques</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Understand the use of shaders and custom materials for creating visually appealing and performant materials within your 3D scenes.  This includes creating realistic effects and optimizing shader code.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>//Example Shader Snippet (GLSL)\nvoid main() {\n  // ... shader code ...\n}\n</code></pre></div><div style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Efficient Collision Detection</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Implement efficient collision detection algorithms to handle interactions between objects in your scene, ensuring smooth and responsive gameplay or simulations.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>// Example using bounding boxes for collision detection (pseudocode)\nif (object1.boundingBox.intersects(object2.boundingBox)) {\n  handleCollision(object1, object2);\n}\n</code></pre></div></div>\"\n}\n```\n"},
  //     ],
  //   },
  // ],
  
});

export const generateFlashCardsAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        { text: "Generate the flashcards on topic : Flutter Fundamentals, User Interface (UI) Development, Basic App Navigation in JSON format with front back content Maximum 15" },
      ],
    },
    {
      role: "model",
      parts: [
        { text: "```json\n[\n  {\n    \"front\": \"What is Flutter?\",\n    \"back\": \"Flutter is Google's UI toolkit for building natively compiled applications for mobile, web, and desktop from a single codebase.\"\n  },\n  {\n    \"front\": \"What is a Widget in Flutter?\",\n    \"back\": \"Everything in Flutter is a widget.  Widgets are the fundamental building blocks of a Flutter UI. They represent elements like text, buttons, images, etc.\"\n  },\n  {\n    \"front\": \"Explain the difference between StatelessWidget and StatefulWidget.\",\n    \"back\": \"StatelessWidget:  Its UI doesn't change after it's built.  StatefulWidget: Its UI can change in response to user interactions or other events.\"\n  },\n  {\n    \"front\": \"What is the purpose of the `BuildContext`?\",\n    \"back\": \"Provides access to information about the widget's position in the widget tree, allowing widgets to interact with the surrounding UI.\"\n  },\n  {\n    \"front\": \"How do you build a simple text widget in Flutter?\",\n    \"back\": \"```dart\\nText('Hello, Flutter!')\\n```\"\n  },\n  {\n    \"front\": \"Name three common layout widgets in Flutter.\",\n    \"back\": \"Row, Column, Stack\"\n  },\n  {\n    \"front\": \"What is the purpose of a `Container` widget?\",\n    \"back\": \"A Container widget provides a convenient way to apply styles like padding, margins, background color, and borders to its child widgets.\"\n  },\n  {\n    \"front\": \"How do you navigate to a new screen in Flutter?\",\n    \"back\": \"Using `Navigator.push()` with a `MaterialPageRoute`.\"\n  },\n  {\n    \"front\": \"What is a `MaterialApp` widget?\",\n    \"back\": \"The root widget for Material Design applications in Flutter. Provides features like app bar, theme, and navigation.\"\n  },\n  {\n    \"front\": \"What is the purpose of a `Scaffold` widget?\",\n    \"back\": \"Provides a basic visual layout structure for a Material Design app, including app bar, body, and floating action button.\"\n  },\n  {\n    \"front\": \"How do you pass data between screens using navigation?\",\n    \"back\": \"Use `arguments` in the `Route` object passed to `Navigator.push()` and access them in the next screen using `ModalRoute.of(context)?.settings.arguments`.\"\n  },\n  {\n    \"front\": \"Explain the difference between `push` and `pushReplacementNamed` navigation methods.\",\n    \"back\": \"`push` adds a new route to the navigation stack. `pushReplacementNamed` replaces the current route with the new one.\"\n  },\n  {\n    \"front\": \"How can you handle screen orientation changes in Flutter?\",\n    \"back\": \"By using `OrientationBuilder` or managing state to adapt the UI based on the current orientation.\"\n  },\n  {\n    \"front\": \"What are some common gesture detectors in Flutter?\",\n    \"back\": \"GestureDetector, InkWell, InkWell, LongPressDetector etc.\"\n  },\n  {\n    \"front\": \"How to use `setState()` in a StatefulWidget?\",\n    \"back\": \"Call `setState()` to rebuild the widget whenever the state changes.  This triggers a UI update.\"\n  }\n]\n```\n" },
      ],
    },
  ],
});

export const generateQuizAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {text: "Generate Quiz on topic: Flutter Fundamentals, User Interface (UI) Development, Basic App Navigation with Question and one word options along with correct answer in JSON format, (Max 10)\nFlutter Fundamentals, User Interface (UI) Development, Basic App Navigation"},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n{\n  \"quiz\": [\n    {\n      \"question\": \"The primary programming language used in Flutter development?\",\n      \"options\": [\"Java\", \"Kotlin\", \"Dart\", \"Swift\"],\n      \"answer\": \"Dart\"\n    },\n    {\n      \"question\": \"Core building block of Flutter UI?\",\n      \"options\": [\"Widgets\", \"Fragments\", \"Activities\", \"Views\"],\n      \"answer\": \"Widgets\"\n    },\n    {\n      \"question\": \"Layout widget for arranging children in a column?\",\n      \"options\": [\"Row\", \"Column\", \"Stack\", \"Container\"],\n      \"answer\": \"Column\"\n    },\n    {\n      \"question\": \"Layout widget for arranging children horizontally?\",\n      \"options\": [\"Column\", \"Row\", \"Stack\", \"Container\"],\n      \"answer\": \"Row\"\n    },\n    {\n      \"question\": \"Widget used for flexible space distribution?\",\n      \"options\": [\"Expanded\", \"Flexible\", \"SizedBox\", \"Padding\"],\n      \"answer\": \"Expanded\"\n    },\n    {\n      \"question\": \"Widget for displaying text in Flutter?\",\n      \"options\": [\"Text\", \"Label\", \"Caption\", \"Paragraph\"],\n      \"answer\": \"Text\"\n    },\n    {\n      \"question\": \"Navigation method for pushing a new route onto the navigation stack?\",\n      \"options\": [\"pop\", \"push\", \"replace\", \"remove\"],\n      \"answer\": \"push\"\n    },\n    {\n      \"question\": \"Widget used to manage navigation in Flutter?\",\n      \"options\": [\"Navigator\", \"Route\", \"Controller\", \"Scaffold\"],\n      \"answer\": \"Navigator\"\n    },\n    {\n      \"question\": \"Widget that provides a basic visual structure for an app?\",\n      \"options\": [\"AppBar\", \"Center\", \"Container\", \"Scaffold\"],\n      \"answer\": \"Scaffold\"\n    },\n    {\n      \"question\": \"State management solution commonly used with Flutter?\",\n      \"options\": [\"Redux\", \"BLoC\", \"Provider\", \"All\"],\n      \"answer\": \"All\"\n    }\n  ]\n}\n```\n"},
      ],
    },
  ],
});

export const generateQaAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {text: "Generate Question answers on topic: Flutter fundaments, Basic app navigation, UI interface Development. The result should have an array of object with \"question\" and \"answer\" field as key value pair in each object. All the result in JSON format, (Max 10)"},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n[\n  {\n    \"question\": \"What is Flutter?\",\n    \"answer\": \"Flutter is Google's UI toolkit for building natively compiled applications for mobile, web, and desktop from a single codebase.  It uses the Dart programming language and a reactive framework to build visually appealing and performant apps.\"\n  },\n  {\n    \"question\": \"What are Widgets in Flutter?\",\n    \"answer\": \"Widgets are the fundamental building blocks of Flutter UIs. Everything you see on the screen is a widget, from buttons and text to layouts and even the overall app structure. Widgets are immutable; changes are reflected by replacing old widgets with new ones.\"\n  },\n  {\n    \"question\": \"Explain the difference between StatelessWidget and StatefulWidget in Flutter.\",\n    \"answer\": \"StatelessWidget represents a part of the UI that does not change over time.  StatefulWidget represents a part of the UI that can change in response to user interactions or other events. It maintains state internally.\"\n  },\n  {\n    \"question\": \"How does basic navigation work in Flutter?\",\n    \"answer\": \"Basic navigation in Flutter typically involves using the `Navigator` widget.  You push new routes (screens) onto a navigation stack using `Navigator.push` and pop routes off the stack using `Navigator.pop`.  Routes are usually defined using MaterialPageRoute or CupertinoPageRoute.\"\n  },\n  {\n    \"question\": \"What is the role of MaterialApp and CupertinoApp in Flutter?\",\n    \"answer\": \"MaterialApp provides a Material Design-based scaffold for your application, including app bar, themes, and other Material Design components. CupertinoApp provides a similar scaffold, but based on Apple's Cupertino (iOS) design language.\"\n  },\n  {\n    \"question\": \"How do you pass data between screens in Flutter navigation?\",\n    \"answer\": \"You can pass data using the `arguments` parameter of `Navigator.push`.  You pass data as an argument to the `MaterialPageRoute` (or similar) and then access it in the destination screen using `ModalRoute.of(context).settings.arguments`.\"\n  },\n  {\n    \"question\": \"Name three common layout widgets in Flutter.\",\n    \"answer\": \"Three common layout widgets are `Row` (arranges children horizontally), `Column` (arranges children vertically), and `Stack` (overlays children on top of each other).\"\n  },\n  {\n    \"question\": \"What is a `BuildContext` in Flutter?\",\n    \"answer\": \"BuildContext is an object that provides information about the location of a widget in the widget tree. It's essential for accessing context-dependent information like themes, localization, and navigation.\"\n  },\n  {\n    \"question\": \"What are some common ways to manage state in Flutter?\",\n    \"answer\": \"Common state management techniques include using `setState` (for simple state changes within a StatefulWidget), `Provider`, `Riverpod`, `BLoC`, `GetX`, and `Redux` (for more complex state management in larger applications).\"\n  },\n  {\n    \"question\": \"How can you create responsive UI layouts in Flutter?\",\n    \"answer\": \"Flutter offers several mechanisms for creating responsive UI layouts. These include using `LayoutBuilder`, `MediaQuery` to access screen dimensions and orientation, and utilizing flexible layout widgets like `Expanded` and `Flexible` to adapt to different screen sizes.\"\n  }\n]\n```\n"},
      ],
    },
  ],
});


const result = await courseOutlineAIModel.sendMessage("INSERT_INPUT_HERE");
console.log(result.response.text());