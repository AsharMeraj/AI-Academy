import { GoogleGenerativeAI } from "@google/generative-ai";

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY as string;
if (!apiKey) {
  throw new Error("API key is not set in the environment variables.");
}

const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-1.5-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};



export const courseOutlineAIModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: "Generate a study material for Python for Exam and level of difficulty will be beginner with summary of course, List of chapters (Max 3) along with summary and Emoji icon for each chapter, Topic list for each chapter. All result in JSON format",
        },
      ],
    },
    {
      role: "model",
      parts: [
        { text: "```json\n{\n  \"courseSummary\": \"This introductory Python course covers the fundamental concepts and syntax needed to start programming in Python.  It's designed for beginners with no prior programming experience.  Upon completion, you will be able to write basic Python programs, understand data types, control flow, and fundamental data structures.\",\n  \"chapters\": [\n    {\n      \"chapterTitle\": \"Introduction to Python and Basic Syntax\",\n      \"emoji\": \"üêç\",\n      \"chapterSummary\": \"This chapter introduces the basics of Python, including setting up your environment, understanding variables, data types (integers, floats, strings, booleans), operators, and basic input/output.\",\n      \"topics\": [\n        \"Installing Python\",\n        \"Running Python code (Interactive shell & scripts)\",\n        \"Variables and Data Types (int, float, str, bool)\",\n        \"Operators (Arithmetic, Comparison, Logical)\",\n        \"Basic Input and Output (print(), input())\",\n        \"Comments in Python\",\n        \"String manipulation (basic slicing and concatenation)\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Control Flow and Data Structures\",\n      \"emoji\": \"üö¶\",\n      \"chapterSummary\": \"This chapter covers conditional statements (if, elif, else), loops (for and while), and introduces fundamental data structures like lists and tuples.\",\n      \"topics\": [\n        \"Conditional Statements (if, elif, else)\",\n        \"Looping Constructs (for loop, while loop)\",\n        \"List creation and manipulation (append, insert, remove, indexing, slicing)\",\n        \"Tuples: creation and accessing elements\",\n        \"Iteration over lists and tuples\",\n        \"Nested loops\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Functions and Basic File Handling\",\n      \"emoji\": \"üìÅ\",\n      \"chapterSummary\": \"This chapter introduces the concept of functions for code reusability and modularity and covers basic file input/output operations.\",\n      \"topics\": [\n        \"Defining and calling functions\",\n        \"Function parameters and arguments\",\n        \"Return values from functions\",\n        \"Scope of variables\",\n        \"Opening, reading, and writing to text files\",\n        \"Error Handling (basic try-except blocks)\"\n      ]\n    }\n  ]\n}\n```\n" },
      ],
    },
  ],
});

export const generateNotesAiModel = model.startChat({
  generationConfig,
  // history: [
  //   {
  //     role: "user",
  //     parts: [
  //       {text: "Generate detailed exam material content as a JSON array of objects, each containing a single \"content\" key with its value as an HTML string styled using inline CSS. Follow these guidelines:\n        Main Headings: Style with font-size: 2rem; font-weight: bold; color: black; margin-bottom: 0.5rem;.\n        Subheadings: Include up to 6 subheadings, styled with color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;.\n        Paragraphs: Add paragraphs in every subheadings styled with font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;.\n        Programming Topics: Add responsive code blocks under each subheading, styled with background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;.\n        Mobile-Friendly Layout: Maintain a clean design with margin-top: 1.5rem; margin-bottom: 1.5rem; between sections.\n        Exclude <html>, <head>, <body>, and <title> tags. Use the provided chapter details to generate the content:\n{\n\"chapterTitle\": \"Advanced React Concepts and Performance Optimization\",\n\"emoji\": \"üöÄ\",\n\"chapterSummary\": \"This chapter delves into advanced React concepts like optimizing performance using techniques such as memoization, useMemo, useCallback, and code splitting. We also cover virtualized lists and efficient rendering strategies for large datasets.\",\n\"topics\": [\n\"Advanced Component Lifecycle Methods\",\n\"Memoization techniques (useMemo, useCallback)\",\n\"React.memo\",\n\"Virtualized Lists (react-window, react-virtualized)\",\n\"Code splitting and lazy loading\",\n\"Performance profiling and optimization strategies\",\n\"Concurrent Mode and Suspense\"\n]\n},\n{\n\"chapterTitle\": \"Complex State Management and Testing\",\n\"emoji\": \"üß™\",\n\"chapterSummary\": \"This chapter explores advanced state management solutions beyond useState and useReducer, including context API for complex data flows, and exploring third-party libraries like Zustand, Jotai, or Recoil.  We also cover advanced testing strategies, including snapshot testing and mocking.\",\n\"topics\": [\n\"Advanced Context API usage\",\n\"State management libraries (Zustand, Jotai, Recoil - comparative analysis)\",\n\"Testing React components with advanced techniques (Jest, React Testing Library)\",\n\"Snapshot testing\",\n\"Mocking network requests and external dependencies\",\n\"End-to-End testing strategies\"\n]\n},\n{\n\"chapterTitle\": \"TypeScript Advanced Types and Best Practices in React\",\n\"emoji\": \"üí°\",\n\"chapterSummary\": \"This chapter focuses on advanced TypeScript types and best practices within a React application. Topics include conditional types, mapped types, utility types, and advanced type inference. We‚Äôll also cover setting up a robust type system for your React application and implementing design patterns using TypeScript.\",\n\"topics\": [\n\"Advanced TypeScript Types (Conditional types, mapped types, infer, etc.)\",\n\"Utility types\",\n\"Type guards and discriminated unions\",\n\"TypeScript generics in React components\",\n\"Implementing design patterns (e.g., Singleton, Factory) in TypeScript\",\n\"Type safety with external libraries and APIs\",\n\"Setting up a strong type system for large React applications\"\n]\n}"},
  //     ],
  //   },
  //   {
  //     role: "model",
  //     parts: [
  //       {text: "```json\n[\n  {\n    \"content\": \"<h1 style=\\\"font-size: 2rem; font-weight: bold; color: black; margin-bottom: 0.5rem;\\\">üöÄ Advanced React Concepts and Performance Optimization</h1><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Advanced Component Lifecycle Methods</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Understanding the nuances of componentDidMount, componentDidUpdate, componentWillUnmount, and their equivalents in functional components (useEffect) for optimized performance and side effect management.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">useEffect(() => {\\n  // ComponentDidMount logic\\n  return () => {\\n    // ComponentWillUnmount logic\\n  };\\n}, []);</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Memoization techniques (useMemo, useCallback)</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Learn how to use `useMemo` and `useCallback` to memoize expensive calculations and prevent unnecessary re-renders.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">const memoizedValue = useMemo(() => expensiveCalculation(), [input]);\\nconst memoizedCallback = useCallback(() => expensiveFunction(), [input]);</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">React.memo</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Utilize `React.memo` for shallow comparison of props to prevent unnecessary re-renders of functional components.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">const MyComponent = React.memo(props => {/* ... */});</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Virtualized Lists (react-window, react-virtualized)</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Efficiently render large lists using virtualization libraries like `react-window` or `react-virtualized`.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Example using react-window\\n&lt;List items={data} height={500} width={300} itemSize={35} /&gt;</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Code splitting and lazy loading</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Improve initial load times by splitting your application into smaller chunks loaded on demand.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">const MyLazyComponent = lazy(() => import('./MyComponent'));</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Performance profiling and optimization strategies</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Learn to profile your React application's performance using browser developer tools and identify bottlenecks.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Use browser developer tools' performance profiler</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Concurrent Mode and Suspense</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Explore React's Concurrent Mode and Suspense for improved responsiveness and handling of asynchronous operations.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">&lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\\n  &lt;MyComponent /&gt;\\n&lt;/Suspense&gt;</pre>\"\n  },\n  {\n    \"content\": \"<h1 style=\\\"font-size: 2rem; font-weight: bold; color: black; margin-bottom: 0.5rem;\\\">üß™ Complex State Management and Testing</h1><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Advanced Context API usage</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Mastering the Context API for managing state across multiple components in a React application.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Example Context API usage\\nconst MyContext = createContext();</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">State management libraries (Zustand, Jotai, Recoil - comparative analysis)</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Compare and contrast popular state management libraries like Zustand, Jotai, and Recoil.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Example using Zustand\\nimport create from 'zustand';\\nconst useStore = create(() => ({ count: 0 }));</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Testing React components with advanced techniques (Jest, React Testing Library)</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Implement robust testing strategies using Jest and React Testing Library.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Example using React Testing Library\\ntest('renders a heading', () => {\\n  render(&lt;MyComponent /&gt;);\\n  expect(screen.getByRole('heading')).toBeInTheDocument();\\n});</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Snapshot testing</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Utilize snapshot testing for automated UI testing.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Jest snapshot testing\\ntest('matches snapshot', () => {\\n  const tree = renderer.create(&lt;MyComponent /&gt;).toJSON();\\nexpect(tree).toMatchSnapshot();\\n});</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Mocking network requests and external dependencies</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Learn to mock network requests and external dependencies during testing.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Mocking a fetch call\\njest.mock('./api', () => ({\\n  fetch: jest.fn(() => Promise.resolve({ data: 'mocked data' })),\\n}));</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">End-to-End testing strategies</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Implement end-to-end testing strategies to verify the entire application flow.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Example using Cypress or Selenium</pre>\"\n  },\n  {\n    \"content\": \"<h1 style=\\\"font-size: 2rem; font-weight: bold; color: black; margin-bottom: 0.5rem;\\\">üí° TypeScript Advanced Types and Best Practices in React</h1><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Advanced TypeScript Types (Conditional types, mapped types, infer, etc.)</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Explore advanced TypeScript types like conditional types, mapped types, and type inference for enhanced type safety.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Conditional type example\\ntype TypeName&lt;T&gt; = T extends string ? 'string' : 'number';</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Utility types</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Learn to leverage TypeScript's built-in utility types like `Partial`, `Readonly`, `Pick`, etc.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Partial type example\\ninterface Person {\\n  name: string;\\n  age: number;\\n}\\nconst partialPerson: Partial&lt;Person&gt; = { name: 'John' };</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Type guards and discriminated unions</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Implement type guards and discriminated unions to narrow down types during runtime.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\ntype Shape = { kind: 'circle', radius: number } | { kind: 'square', side: number };\\nfunction getArea(shape: Shape) {\\n  if (shape.kind === 'circle') {\\n    // Type is narrowed to { kind: 'circle', radius: number }\\n  }\\n}</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">TypeScript generics in React components</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Enhance code reusability and type safety by using generics in React components.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">function MyComponent&lt;T&gt;({ data }: { data: T }) {\\n  return &lt;div&gt;{JSON.stringify(data)}&lt;/div&gt;;\\n}</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Implementing design patterns (e.g., Singleton, Factory) in TypeScript</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Implement design patterns with TypeScript for better code organization and maintainability.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Singleton pattern example\\nclass Database {\\n  private static instance: Database;\\n  private constructor() {}\\n  public static getInstance(): Database {\\n    if (!Database.instance) {\\n      Database.instance = new Database();\\n    }\\n    return Database.instance;\\n  }\\n}</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Type safety with external libraries and APIs</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Maintain type safety when interacting with external libraries and APIs.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Defining types for external API responses</pre><p style=\\\"margin-top: 1.5rem; margin-bottom: 1.5rem;\\\"></p><h2 style=\\\"color: #007bff; font-weight: bold; font-size: 1.7rem; margin-bottom: 0;\\\">Setting up a strong type system for large React applications</h2><p style=\\\"font-size: 16px; line-height: 1.6; margin-bottom: 0; padding: 0.5rem;\\\">Strategies for setting up a robust type system in large React applications.</p><pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">// Use TypeScript interfaces, types, and generics effectively</pre>\"\n  }\n]\n```"},
  //     ],
  //   },
  // ],
  // history: [
  //   {
  //     role: "user",
  //     parts: [
  //       {text: "Generate detailed content in JSON format. The output should contain an object with a key-value pair chapters, where the value is an array of 3 chapter objects. Each chapter should include the following structure:\n\nA main heading as a key-value pair heading with its corresponding paragraph in headingPara.\nSubheadings as a key-value pair subheadings, which should be an array of objects. Each subheading object should include:\nA subheading as a key-value pair subheading.\nA corresponding paragraph for the subheading in subheadingPara.\nA key-value pair codeBlock, containing relevant code as a string based on the topic.\nEnsure the generated content remains consistent across multiple generations.\nPlease use the following chapter details:\n\n{\n      \"chapterTitle\": \"TypeScript Fundamentals\",\n      \"emoji\": \"üìå\",\n      \"chapterSummary\": \"This chapter covers the basics of TypeScript, including setting up your environment, type annotations, basic types, and interfaces.\",\n      \"topics\": [\n        \"Setting up TypeScript environment\",\n        \"Type annotations: Basic types (number, string, boolean, null, undefined)\",\n        \"Arrays and Tuples\",\n        \"Interfaces and their usage\",\n        \"Type aliases\",\n        \"Enums\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Advanced Types and Generics\",\n      \"emoji\": \"üí°\",\n      \"chapterSummary\": \"This chapter dives into more advanced concepts, including generics, type inference, and working with complex types.\",\n      \"topics\": [\n        \"Understanding Type Inference\",\n        \"Generics and their benefits\",\n        \"Union Types\",\n        \"Intersection Types\",\n        \"Conditional Types\",\n        \"Type Guards\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Object-Oriented Programming (OOP) in TypeScript\",\n      \"emoji\": \"üß±\",\n      \"chapterSummary\": \"This chapter covers object-oriented programming principles as they relate to TypeScript, including classes, inheritance, and access modifiers.\",\n      \"topics\": [\n        \"Classes and Objects\",\n        \"Inheritance\",\n        \"Access Modifiers (public, private, protected)\",\n        \"Abstract Classes\",\n        \"Interfaces in OOP context\",\n        \"Polymorphism\"\n      ]\n    } "},
  //     ],
  //   },
  //   {
  //     role: "model",
  //     parts: [
  //       {text: "```json\n{\n  \"chapters\": [\n    {\n      \"heading\": \"TypeScript Fundamentals\",\n      \"headingPara\": \"This chapter introduces the fundamental concepts of TypeScript, a superset of JavaScript that adds static typing.  We'll cover setting up your development environment, understanding type annotations, and working with basic data types.  Learning these foundational elements is crucial for building robust and maintainable TypeScript applications.\",\n      \"subheadings\": [\n        {\n          \"subheading\": \"Setting up TypeScript Environment\",\n          \"subheadingPara\": \"Before diving into TypeScript code, you need to set up your development environment. This typically involves installing the TypeScript compiler (tsc) using npm or yarn.  After installation, you can create a tsconfig.json file to configure your project settings.\",\n          \"codeBlock\": \"npm install -g typescript\\nnpm init -y\\ntsc --init\"\n        },\n        {\n          \"subheading\": \"Basic Types\",\n          \"subheadingPara\": \"TypeScript offers several basic types to annotate variables. These include `number`, `string`, `boolean`, `null`, and `undefined`.  Type annotations improve code readability and help catch errors during development.\",\n          \"codeBlock\": \"let age: number = 30;\\nlet name: string = \\\"John Doe\\\";\\nlet isAdult: boolean = true;\\nlet user: null = null;\\nlet value: undefined = undefined;\"\n        },\n        {\n          \"subheading\": \"Arrays and Tuples\",\n          \"subheadingPara\": \"Arrays in TypeScript can be annotated with the type of their elements.  Tuples are a special type of array where the length and type of each element are fixed.\",\n          \"codeBlock\": \"let numbers: number[] = [1, 2, 3];\\nlet stringArray: string[] = ['a', 'b', 'c'];\\nlet tuple: [string, number] = ['hello', 5];\"\n        }\n      ]\n    },\n    {\n      \"heading\": \"Advanced Types and Generics\",\n      \"headingPara\": \"This chapter delves into more advanced TypeScript concepts, focusing on generics, type inference, and complex type combinations. Mastering these techniques is essential for building reusable and type-safe components.\",\n      \"subheadings\": [\n        {\n          \"subheading\": \"Understanding Type Inference\",\n          \"subheadingPara\": \"TypeScript's type inference system automatically infers types based on the context.  This reduces the need for explicit type annotations in many cases, making the code cleaner and more concise.\",\n          \"codeBlock\": \"let inferredNumber = 10; // TypeScript infers 'number' type\\nlet inferredString = 'hello'; // TypeScript infers 'string' type\"\n        },\n        {\n          \"subheading\": \"Generics\",\n          \"subheadingPara\": \"Generics allow you to write reusable components that can work with different types without compromising type safety. They use type parameters to represent unknown types.\",\n          \"codeBlock\": \"function identity<T>(arg: T): T {\\n  return arg;\\n}\\nlet myNumber: number = identity<number>(10);\\nlet myString: string = identity<string>('hello');\"\n        },\n        {\n          \"subheading\": \"Union and Intersection Types\",\n          \"subheadingPara\": \"Union types allow a variable to hold values of multiple types, while intersection types combine multiple types into a single type that includes all members of the constituent types.\",\n          \"codeBlock\": \"let value: string | number = 10; // Union type\\nvalue = 'hello';\\ninterface Person { name: string; }\\ninterface Address { street: string; }\\nlet personAddress: Person & Address; // Intersection type\"\n        }\n      ]\n    },\n    {\n      \"heading\": \"Object-Oriented Programming (OOP) in TypeScript\",\n      \"headingPara\": \"This chapter explores object-oriented programming (OOP) principles within the context of TypeScript.  We'll cover classes, inheritance, access modifiers, and abstract classes, showing how OOP enhances code organization and maintainability.\",\n      \"subheadings\": [\n        {\n          \"subheading\": \"Classes and Objects\",\n          \"subheadingPara\": \"Classes are blueprints for creating objects.  They define properties and methods that objects of that class will have.\",\n          \"codeBlock\": \"class Person {\\n  name: string;\\nage: number;\\n  constructor(name: string, age: number) {\\n    this.name = name;\\n    this.age = age;\\n  }\\n}\"\n        },\n        {\n          \"subheading\": \"Inheritance\",\n          \"subheadingPara\": \"Inheritance allows creating new classes (derived classes) based on existing classes (base classes).  Derived classes inherit properties and methods from their base classes.\",\n          \"codeBlock\": \"class Employee extends Person {\\n  salary: number;\\n  constructor(name: string, age: number, salary: number) {\\n    super(name, age);\\n    this.salary = salary;\\n  }\\n}\"\n        },\n        {\n          \"subheading\": \"Access Modifiers\",\n          \"subheadingPara\": \"Access modifiers (`public`, `private`, `protected`) control the accessibility of class members from other parts of the code.\",\n          \"codeBlock\": \"class Person {\\n  public name: string;\\n  private age: number;\\n  protected address: string;\\n}\"\n        }\n      ]\n    }\n  ]\n}\n```\n"},
  //     ],
  //   },
  // ],
  history: [
    {
      role: "user",
      parts: [
        {text: "Generate detailed content in JSON format. The output should contain an object with a key-value pair chapters, where the chapter is an object. The chapter should include:\nheading: Main heading of the chapter with given emoji an the end.\nheadingPara: A paragraph explaining the chapter's topic.\nsubheadings: An array of 4 objects, each with:\nsubheading: Title of the subheading.\nsubheadingPara: Paragraph explaining the subheading with in 2 lines.\ncodeBlock: Relevant code in complete HTML styled with the following CSS (make sure it is readable and complete code related to it): background-color: #f3f4f6 padding: 1.5rem border-radius: 8px font-family: monospace font-size: 14px overflow-x: auto for horizontal scrolling width: 100% margin-bottom: 1.5rem\nEnsure clean, consistent, and engaging content. Use the provided chapter details:\n{\n\"chapterTitle\": \"Advanced Rendering Techniques and Optimization\",\n\"emoji\": \"‚ú®\",\n\"chapterSummary\": \"This chapter explores advanced rendering techniques to achieve high-quality visuals and optimal performance in complex Three.js scenes.  Topics include shader programming, post-processing effects, and scene optimization strategies.\",\n\"topics\": [\n\"Advanced Shader Material Creation (using GLSL)\",\n\"Custom Shader Materials for Unique Visual Effects\",\n\"Post-Processing Effects (Bloom, SSAO, Depth of Field)\",\n\"Scene Optimization Techniques (Level of Detail, Occlusion Culling)\",\n\"Performance Profiling and Optimization Strategies\",\n\"Working with different renderers (WebGLRenderer, WebGPU)\",\n\"Implementation of deferred rendering or forward rendering\"\n]\n},"},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n{\n  \"chapters\": {\n    \"heading\": \"Advanced Rendering Techniques and Optimization ‚ú®\",\n    \"headingPara\": \"This chapter delves into the intricacies of advanced rendering techniques within Three.js, focusing on achieving both visually stunning and performant 3D scenes. We'll explore powerful methods like shader programming for creating unique materials, implementing post-processing effects to enhance realism, and employing strategic optimization techniques to maintain smooth frame rates even in complex scenarios.  This will cover various approaches, helping you tailor your rendering pipeline to your specific needs and hardware capabilities.\",\n    \"subheadings\": [\n      {\n        \"subheading\": \"Advanced Shader Material Creation (using GLSL)\",\n        \"subheadingPara\": \"Learn to craft custom materials using GLSL shaders, giving you unparalleled control over surface appearance.  This unlocks the ability to create realistic materials and unique visual effects not possible with standard Three.js materials.\",\n        \"codeBlock\": \"<div style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">\\n  <pre>\\n    <code>\\n      // GLSL fragment shader\\n      void main() {\\n        vec3 color = vec3(1.0, 0.5, 0.2); // Orange color\\n        gl_FragColor = vec4(color, 1.0);\\n      }\\n    </code>\\n  </pre>\\n</div>\"\n      },\n      {\n        \"subheading\": \"Custom Shader Materials for Unique Visual Effects\",\n        \"subheadingPara\": \"Extend your creativity by designing shaders that produce unique visual styles. Explore techniques like cel-shading, stylized lighting, and procedural texture generation to create distinctive looks.\",\n        \"codeBlock\": \"<div style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">\\n  <pre>\\n    <code>\\n      // GLSL vertex shader (example with displacement)\\n      varying vec3 vNormal;\\n      uniform float displacementStrength;\\n\\n      void main() {\\n        vec3 newPosition = position + normal * displacementStrength;\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\\n        vNormal = normal;\\n      }\\n    </code>\\n  </pre>\\n</div>\"\n      },\n      {\n        \"subheading\": \"Post-Processing Effects (Bloom, SSAO, Depth of Field)\",\n        \"subheadingPara\": \"Enhance your scene's realism and visual appeal using post-processing effects. Implement bloom for glowing highlights, SSAO for ambient occlusion, and depth of field for cinematic focus.\",\n        \"codeBlock\": \"<div style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">\\n  <pre>\\n    <code>\\n      //Conceptual example, actual implementation requires a post-processing framework\\n      // like three.js's postprocessing library.\\n      //This is a simplified illustration and not runnable code.\\n      Bloom bloomPass = new BloomPass();\\n      composer.addPass(bloomPass);\\n    </code>\\n  </pre>\\n</div>\"\n      },\n      {\n        \"subheading\": \"Scene Optimization Techniques (Level of Detail, Occlusion Culling)\",\n        \"subheadingPara\": \"Learn strategies to optimize complex scenes for improved performance. Explore techniques like Level of Detail (LOD) for efficient rendering of distant objects and occlusion culling to hide objects behind others.\",\n        \"codeBlock\": \"<div style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\">\\n  <pre>\\n    <code>\\n      //Conceptual example, actual implementation depends on the chosen library or method\\n      //This is a simplified illustration and not runnable code.\\n      scene.add(new LOD(meshHigh, meshLow, meshVeryLow));\\n      renderer.setClearColor(new Color(0x000000));\\n    </code>\\n  </pre>\\n</div>\"\n      }\n    ]\n  }\n}\n```\n"},
      ],
    },
  ],
  // history: [
  //   {
  //     role: "user",
  //     parts: [
  //       {text: "Generate detailed content in JSON format. The output should contain an object with a key-value pair chapters, where the chapter is an object. The chapter should include:\n            heading: Main heading of the chapter with given emoji an the end.\n            headingPara: A paragraph explaining the chapter's topic.\n            subheadings: An array of objects, each with:\n            subheading: Title of the subheading.\n            subheadingPara: Paragraph explaining the subheading with in 1 lines.\n            codeBlock: Relevant code in complete HTML styled with the following CSS (make sure it is readable and in proper code form):\n            background-color: #f3f4f6\n            padding: 1.5rem\n            border-radius: 8px\n            font-family: monospace\n            font-size: 14px\n            overflow-x: auto for horizontal scrolling\n            width: 100%\n            margin-bottom: 1.5rem\n            Ensure clean, consistent, and engaging content. Use the provided chapter details:\n{\n\"chapterTitle\": \"Object-Oriented Programming (OOP) in C++\",\n\"emoji\": \"üß±\",\n\"chapterSummary\": \"This chapter delves deeper into OOP concepts, including inheritance, polymorphism, and abstraction.  It covers different access specifiers and explores the use of virtual functions and interfaces.\",\n\"topics\": [\n\"Classes and Objects: Deep Dive\",\n\"Constructors and Destructors\",\n\"Inheritance (Single, Multiple, Multilevel)\",\n\"Polymorphism (Virtual Functions, Runtime Polymorphism)\",\n\"Abstract Classes and Interfaces\",\n\"Access Specifiers (public, private, protected)\",\n\"Encapsulation and Data Hiding\"\n]\n},"},
  //     ],
  //   },
  //   {
  //     role: "model",
  //     parts: [
  //       {text: "```json\n{\n  \"chapters\": {\n    \"heading\": \"Object-Oriented Programming (OOP) in C++ üß±\",\n    \"headingPara\": \"This chapter provides a comprehensive exploration of Object-Oriented Programming (OOP) principles within the C++ programming language. We'll delve into core concepts such as inheritance, polymorphism, and abstraction, examining how these features facilitate the creation of robust, maintainable, and reusable code.  We'll also cover crucial aspects like access specifiers and the implementation of virtual functions and interfaces.\",\n    \"subheadings\": [\n      {\n        \"subheading\": \"Classes and Objects: Deep Dive\",\n        \"subheadingPara\": \"We'll examine the fundamental building blocks of OOP: classes (blueprints for objects) and objects (instances of classes), exploring their attributes and methods in detail.\",\n        \"codeBlock\": \"<pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>class Dog {\\npublic:\\n    std::string name;\\n    std::string breed;\\n    void bark() {\\n        std::cout << \\\"Woof!\\\";\\n    }\\n};\\n\\nint main() {\\n    Dog myDog;\\n    myDog.name = \\\"Buddy\\\";\\n    myDog.breed = \\\"Golden Retriever\\\";\\n    myDog.bark();\\n    return 0;\\n}</code></pre>\"\n      },\n      {\n        \"subheading\": \"Constructors and Destructors\",\n        \"subheadingPara\": \"Learn how constructors initialize objects upon creation and destructors handle object cleanup and resource management when they're no longer needed.\",\n        \"codeBlock\": \"<pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>class MyClass {\\npublic:\\n    MyClass() { std::cout << \\\"Constructor called\\\\n\\\"; }\\n    ~MyClass() { std::cout << \\\"Destructor called\\\\n\\\"; }\\n};\\n\\nint main() {\\n    MyClass obj;\\n    return 0;\\n}</code></pre>\"\n      },\n      {\n        \"subheading\": \"Inheritance (Single, Multiple, Multilevel)\",\n        \"subheadingPara\": \"Explore different types of inheritance ‚Äì single, multiple, and multilevel ‚Äì and how they enable code reuse and the creation of hierarchical class structures.\",\n        \"codeBlock\": \"<pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>class Animal {\\npublic:\\n    virtual void makeSound() = 0;\\n};\\n\\nclass Dog : public Animal {\\npublic:\\n    void makeSound() override { std::cout << \\\"Woof!\\\\n\\\"; }\\n};</code></pre>\"\n      },\n      {\n        \"subheading\": \"Polymorphism (Virtual Functions, Runtime Polymorphism)\",\n        \"subheadingPara\": \"Understand how polymorphism allows objects of different classes to be treated as objects of a common type, leading to flexible and extensible code.\",\n        \"codeBlock\": \"<pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>Animal* animal = new Dog();\\nanimal->makeSound(); // Runtime polymorphism\\ndelete animal;</code></pre>\"\n      },\n      {\n        \"subheading\": \"Abstract Classes and Interfaces\",\n        \"subheadingPara\": \"Learn about abstract classes (cannot be instantiated) and interfaces (defining contracts for classes) and their roles in designing flexible and extensible systems.\",\n        \"codeBlock\": \"<pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>class Shape {\\npublic:\\n    virtual double getArea() = 0;\\n};</code></pre>\"\n      },\n      {\n        \"subheading\": \"Access Specifiers (public, private, protected)\",\n        \"subheadingPara\": \"Master the use of access specifiers (public, private, protected) to control the visibility and accessibility of class members.\",\n        \"codeBlock\": \"<pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>class MyClass {\\nprivate:\\n    int privateMember;\\nprotected:\\n    int protectedMember;\\npublic:\\n    int publicMember;\\n};</code></pre>\"\n      },\n      {\n        \"subheading\": \"Encapsulation and Data Hiding\",\n        \"subheadingPara\": \"Understand how encapsulation bundles data and methods that operate on that data, protecting it from outside access and ensuring data integrity.\",\n        \"codeBlock\": \"<pre style=\\\"background-color: #f3f4f6; padding: 1.5rem; border-radius: 8px; font-family: monospace; font-size: 14px; overflow-x: auto; width: 100%; margin-bottom: 1.5rem;\\\"><code>class BankAccount {\\nprivate:\\n    double balance;\\npublic:\\n    void deposit(double amount) { balance += amount; }\\n    double getBalance() const { return balance; }\\n};</code></pre>\"\n      }\n    ]\n  }\n}\n```\n"},
  //     ],
  //   },
  // ],
  
});

export const generateFlashCardsAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        { text: "Generate the flashcards on topic : Flutter Fundamentals, User Interface (UI) Development, Basic App Navigation in JSON format with front back content Maximum 15" },
      ],
    },
    {
      role: "model",
      parts: [
        { text: "```json\n[\n  {\n    \"front\": \"What is Flutter?\",\n    \"back\": \"Flutter is Google's UI toolkit for building natively compiled applications for mobile, web, and desktop from a single codebase.\"\n  },\n  {\n    \"front\": \"What is a Widget in Flutter?\",\n    \"back\": \"Everything in Flutter is a widget.  Widgets are the fundamental building blocks of a Flutter UI. They represent elements like text, buttons, images, etc.\"\n  },\n  {\n    \"front\": \"Explain the difference between StatelessWidget and StatefulWidget.\",\n    \"back\": \"StatelessWidget:  Its UI doesn't change after it's built.  StatefulWidget: Its UI can change in response to user interactions or other events.\"\n  },\n  {\n    \"front\": \"What is the purpose of the `BuildContext`?\",\n    \"back\": \"Provides access to information about the widget's position in the widget tree, allowing widgets to interact with the surrounding UI.\"\n  },\n  {\n    \"front\": \"How do you build a simple text widget in Flutter?\",\n    \"back\": \"```dart\\nText('Hello, Flutter!')\\n```\"\n  },\n  {\n    \"front\": \"Name three common layout widgets in Flutter.\",\n    \"back\": \"Row, Column, Stack\"\n  },\n  {\n    \"front\": \"What is the purpose of a `Container` widget?\",\n    \"back\": \"A Container widget provides a convenient way to apply styles like padding, margins, background color, and borders to its child widgets.\"\n  },\n  {\n    \"front\": \"How do you navigate to a new screen in Flutter?\",\n    \"back\": \"Using `Navigator.push()` with a `MaterialPageRoute`.\"\n  },\n  {\n    \"front\": \"What is a `MaterialApp` widget?\",\n    \"back\": \"The root widget for Material Design applications in Flutter. Provides features like app bar, theme, and navigation.\"\n  },\n  {\n    \"front\": \"What is the purpose of a `Scaffold` widget?\",\n    \"back\": \"Provides a basic visual layout structure for a Material Design app, including app bar, body, and floating action button.\"\n  },\n  {\n    \"front\": \"How do you pass data between screens using navigation?\",\n    \"back\": \"Use `arguments` in the `Route` object passed to `Navigator.push()` and access them in the next screen using `ModalRoute.of(context)?.settings.arguments`.\"\n  },\n  {\n    \"front\": \"Explain the difference between `push` and `pushReplacementNamed` navigation methods.\",\n    \"back\": \"`push` adds a new route to the navigation stack. `pushReplacementNamed` replaces the current route with the new one.\"\n  },\n  {\n    \"front\": \"How can you handle screen orientation changes in Flutter?\",\n    \"back\": \"By using `OrientationBuilder` or managing state to adapt the UI based on the current orientation.\"\n  },\n  {\n    \"front\": \"What are some common gesture detectors in Flutter?\",\n    \"back\": \"GestureDetector, InkWell, InkWell, LongPressDetector etc.\"\n  },\n  {\n    \"front\": \"How to use `setState()` in a StatefulWidget?\",\n    \"back\": \"Call `setState()` to rebuild the widget whenever the state changes.  This triggers a UI update.\"\n  }\n]\n```\n" },
      ],
    },
  ],
});

export const generateQuizAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {text: "Generate Quiz on topic: Flutter Fundamentals, User Interface (UI) Development, Basic App Navigation with Question and one word options along with correct answer in JSON format, (Max 10)\nFlutter Fundamentals, User Interface (UI) Development, Basic App Navigation"},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n{\n  \"quiz\": [\n    {\n      \"question\": \"The primary programming language used in Flutter development?\",\n      \"options\": [\"Java\", \"Kotlin\", \"Dart\", \"Swift\"],\n      \"answer\": \"Dart\"\n    },\n    {\n      \"question\": \"Core building block of Flutter UI?\",\n      \"options\": [\"Widgets\", \"Fragments\", \"Activities\", \"Views\"],\n      \"answer\": \"Widgets\"\n    },\n    {\n      \"question\": \"Layout widget for arranging children in a column?\",\n      \"options\": [\"Row\", \"Column\", \"Stack\", \"Container\"],\n      \"answer\": \"Column\"\n    },\n    {\n      \"question\": \"Layout widget for arranging children horizontally?\",\n      \"options\": [\"Column\", \"Row\", \"Stack\", \"Container\"],\n      \"answer\": \"Row\"\n    },\n    {\n      \"question\": \"Widget used for flexible space distribution?\",\n      \"options\": [\"Expanded\", \"Flexible\", \"SizedBox\", \"Padding\"],\n      \"answer\": \"Expanded\"\n    },\n    {\n      \"question\": \"Widget for displaying text in Flutter?\",\n      \"options\": [\"Text\", \"Label\", \"Caption\", \"Paragraph\"],\n      \"answer\": \"Text\"\n    },\n    {\n      \"question\": \"Navigation method for pushing a new route onto the navigation stack?\",\n      \"options\": [\"pop\", \"push\", \"replace\", \"remove\"],\n      \"answer\": \"push\"\n    },\n    {\n      \"question\": \"Widget used to manage navigation in Flutter?\",\n      \"options\": [\"Navigator\", \"Route\", \"Controller\", \"Scaffold\"],\n      \"answer\": \"Navigator\"\n    },\n    {\n      \"question\": \"Widget that provides a basic visual structure for an app?\",\n      \"options\": [\"AppBar\", \"Center\", \"Container\", \"Scaffold\"],\n      \"answer\": \"Scaffold\"\n    },\n    {\n      \"question\": \"State management solution commonly used with Flutter?\",\n      \"options\": [\"Redux\", \"BLoC\", \"Provider\", \"All\"],\n      \"answer\": \"All\"\n    }\n  ]\n}\n```\n"},
      ],
    },
  ],
});

export const generateQaAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {text: "Generate Question answers on topic: Flutter fundaments, Basic app navigation, UI interface Development. The result should have an array of object with \"question\" and \"answer\" field as key value pair in each object. All the result in JSON format, (Max 10)"},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n[\n  {\n    \"question\": \"What is Flutter?\",\n    \"answer\": \"Flutter is Google's UI toolkit for building natively compiled applications for mobile, web, and desktop from a single codebase.  It uses the Dart programming language and a reactive framework to build visually appealing and performant apps.\"\n  },\n  {\n    \"question\": \"What are Widgets in Flutter?\",\n    \"answer\": \"Widgets are the fundamental building blocks of Flutter UIs. Everything you see on the screen is a widget, from buttons and text to layouts and even the overall app structure. Widgets are immutable; changes are reflected by replacing old widgets with new ones.\"\n  },\n  {\n    \"question\": \"Explain the difference between StatelessWidget and StatefulWidget in Flutter.\",\n    \"answer\": \"StatelessWidget represents a part of the UI that does not change over time.  StatefulWidget represents a part of the UI that can change in response to user interactions or other events. It maintains state internally.\"\n  },\n  {\n    \"question\": \"How does basic navigation work in Flutter?\",\n    \"answer\": \"Basic navigation in Flutter typically involves using the `Navigator` widget.  You push new routes (screens) onto a navigation stack using `Navigator.push` and pop routes off the stack using `Navigator.pop`.  Routes are usually defined using MaterialPageRoute or CupertinoPageRoute.\"\n  },\n  {\n    \"question\": \"What is the role of MaterialApp and CupertinoApp in Flutter?\",\n    \"answer\": \"MaterialApp provides a Material Design-based scaffold for your application, including app bar, themes, and other Material Design components. CupertinoApp provides a similar scaffold, but based on Apple's Cupertino (iOS) design language.\"\n  },\n  {\n    \"question\": \"How do you pass data between screens in Flutter navigation?\",\n    \"answer\": \"You can pass data using the `arguments` parameter of `Navigator.push`.  You pass data as an argument to the `MaterialPageRoute` (or similar) and then access it in the destination screen using `ModalRoute.of(context).settings.arguments`.\"\n  },\n  {\n    \"question\": \"Name three common layout widgets in Flutter.\",\n    \"answer\": \"Three common layout widgets are `Row` (arranges children horizontally), `Column` (arranges children vertically), and `Stack` (overlays children on top of each other).\"\n  },\n  {\n    \"question\": \"What is a `BuildContext` in Flutter?\",\n    \"answer\": \"BuildContext is an object that provides information about the location of a widget in the widget tree. It's essential for accessing context-dependent information like themes, localization, and navigation.\"\n  },\n  {\n    \"question\": \"What are some common ways to manage state in Flutter?\",\n    \"answer\": \"Common state management techniques include using `setState` (for simple state changes within a StatefulWidget), `Provider`, `Riverpod`, `BLoC`, `GetX`, and `Redux` (for more complex state management in larger applications).\"\n  },\n  {\n    \"question\": \"How can you create responsive UI layouts in Flutter?\",\n    \"answer\": \"Flutter offers several mechanisms for creating responsive UI layouts. These include using `LayoutBuilder`, `MediaQuery` to access screen dimensions and orientation, and utilizing flexible layout widgets like `Expanded` and `Flexible` to adapt to different screen sizes.\"\n  }\n]\n```\n"},
      ],
    },
  ],
});


const result = await courseOutlineAIModel.sendMessage("INSERT_INPUT_HERE");
console.log(result.response.text());